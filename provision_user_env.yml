---
# vim: set ft=yaml.ansible :
- name: provision shell and environment
  hosts: localhost
  connection: local
  vars:
    win_temp: >-
      {{ lookup('pipe', 'cmd.exe /c "echo %TEMP%"') }}
    win_appdata: '{{ ansible_env.APPDATA }}'
    win_programs: '{{ win_appdata }}\Microsoft\Windows\Start Menu\Programs'
    win_startup: '{{ win_programs }}\Startup'
    win_handyapps_startmenu: '{{ win_programs }}\Local Apps'
    win_userprofile: >-
      {{ lookup('pipe', 'cmd.exe /c "echo %USERPROFILE%"') }}
    win_handyapps_root: '{{ win_userprofile }}\opt'
    proxy_env: {}
    __proxy_env:
      http_proxy: http://150.67.140.80:3128
      https_proxy: http://150.67.140.80:3128
    handy_apps:
    - src: https://github.com/nathancorvussolis/crvskkserv/releases/download/2.2.0/crvskkserv-2.2.0.zip 
      name: crvskkserv
      startup: yes
    - src: https://portableapps.com/redirect/?a=PortableApps.comPlatform&s=s&d=pa&f=PortableApps.com_Platform_Setup_15.0.2.paf.exe
      name: portableAppsPlatform
      executable: Start.exe
      startup: yes
    - src: https://ja.osdn.net/frs/redir.php?m=jaist&f=yamy%2F43637%2Fyamy-0.03.zip
      name: yamy
      startup: yes
    - src: https://download.sysinternals.com/files/ProcessExplorer.zip
      name: ProcessExplorer
      executable: procexp64.exe
    - src: https://ftp.postgresql.org/pub/odbc/versions/dll/psqlodbc_10_03_0000-x64.zip
      name: psqlodbc64
      reg_startmenu: no
    papp_data_path: >-
      {{ lookup('pipe', 'wslpath "%s"' % win_handyapps_root)}}/portableAppsPlatform/PortableApps/PortableApps.com/Data
    wsl_userprofile: >-
      {{ lookup('pipe', 'wslpath "%s"' % win_userprofile) }}
    wsl_handyapps_root: >-
      {{ lookup('pipe', 'wslpath "%s"' % win_handyapps_root) }}
    confhome: '{{ ansible_env.XGD_CONFIG_HOME|default("~/.config") }}'
    confs_from_git:
    - repo: https://github.com/mavnn/mintty-colors-solarized
      dest: mintty/solarized
    - repo: https://github.com/seebi/dircolors-solarized
      dest: dircolors/solarized
    config_fish: |-
      source {{ confhome }}/mintty/solarized/sol.dark
      eval (dircolors -c {{ confhome }}/dircolors/solarized/dircolors.256dark)
      alias vi=nvim
      alias vim=nvim
      stty stop undef
      stty start undef
    font_sources:
    - https://github.com/mzyy94/RictyDiminished-for-Powerline/blob/master/powerline-fontpatched/Ricty Diminished Bold Oblique for Powerline.ttf
    - https://github.com/mzyy94/RictyDiminished-for-Powerline/blob/master/powerline-fontpatched/Ricty Diminished Bold for Powerline.ttf
    - https://github.com/mzyy94/RictyDiminished-for-Powerline/blob/master/powerline-fontpatched/Ricty Diminished Discord Bold Oblique for Powerline.ttf
    - https://github.com/mzyy94/RictyDiminished-for-Powerline/blob/master/powerline-fontpatched/Ricty Diminished Discord Bold for Powerline.ttf
    - https://github.com/mzyy94/RictyDiminished-for-Powerline/blob/master/powerline-fontpatched/Ricty Diminished Discord Oblique for Powerline.ttf
    - https://github.com/mzyy94/RictyDiminished-for-Powerline/blob/master/powerline-fontpatched/Ricty Diminished Discord Regular for Powerline.ttf
    - https://github.com/mzyy94/RictyDiminished-for-Powerline/blob/master/powerline-fontpatched/Ricty Diminished Oblique for Powerline.ttf
    - https://github.com/mzyy94/RictyDiminished-for-Powerline/blob/master/powerline-fontpatched/Ricty Diminished Regular for Powerline.ttf
    shortcut_ps: >
      powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command '
      $wsh = New-Object -ComObject WScript.Shell;
      $link = $wsh.CreateShortcut("%(sc_linkname)s.lnk");
      $link.Arguments = "%(sc_args)s";
      $link.TargetPath = "%(sc_target)s";
      $link.Save();'
    skkdict_sources:
    - http://openlab.jp/skk/dic/SKK-JISYO.L.gz
    - http://d.hatena.ne.jp/images/keyword/keywordlist_furigana.csv

  tasks:
  - name: install fisher
    shell: >
      executable=/usr/bin/fish
      creates={{ confhome }}/fish/functions/fisher.fish
      curl https://git.io/fisher --create-dirs -sLo {{ confhome }}/fish/functions/fisher.fish; and
      fisher up
    environment: '{{ proxy_env }}'

  - name: install agnoster
    shell: >
      creates={{ confhome }}/fisher/github.com/hauleth/agnoster/README.md
      executable=/usr/bin/fish
      fisher add hauleth/agnoster
    environment: '{{ proxy_env }}'

  - name: xdg config dirs created
    file: >
      path={{ confhome }}/{{ item.dest }}
      state=directory
    loop: '{{ confs_from_git }}'

  - name: color schemes cloned
    git: >
      dest={{ confhome }}/{{ item.dest }}
      repo={{ item.repo }}
    environment: '{{ proxy_env }}'
    loop: '{{ confs_from_git }}'

  - name: prepare config.fish
    copy: >
      dest={{ confhome }}/fish/config.fish
      content={{ config_fish }}

  - name: local bin dir created
    file: >
      path=~/bin
      state=directory
      mode=0755

  - name: user executable added to path
    shell: >
      executable=/usr/bin/fish
      contains /home/{{ ansible_env.LOGNAME }}/bin $fish_user_paths; or set -U fish_user_paths ~/bin $fish_user_paths
    register: _r
    changed_when: no
  - debug: var=_r verbosity=1

  - name: handy apps folder created
    shell: >
      creates={{ lookup('pipe', 'wslpath "%s"' % win_handyapps_root) }}/{{ item.name }}
      cmd.exe /c 'mkdir' '{{ win_handyapps_root }}\{{ item.name }}'
    loop: '{{ handy_apps }}'

  - name: handy apps start menu folder created
    shell: >
      creates={{ lookup('pipe', 'wslpath "%s"' % win_handyapps_startmenu) }}
      cmd.exe /c 'mkdir' '{{ win_handyapps_startmenu }}'

  - name: handy apps installed
    unarchive: >
      src={{ item.src }}
      dest={{ wsl_handyapps_root }}/{{ item.name }}
      remote_src=yes
    environment: '{{ proxy_env }}'
    when: item.src is search("(\.zip$|\.tar.gz)")
    loop: '{{ handy_apps }}'

  - name: handy_apps downloaded
    get_url: >
      url={{ item.src }}
      dest={{ lookup('pipe', 'wslpath "%s"' % win_temp) }}
    register: _get
    environment: '{{ proxy_env }}'
    when: item.src is not search("(\.zip$|\.tar.gz$)")
    loop: '{{ handy_apps }}'

  - name: handy_apps extracted
    shell: >
      creates={{ handy_app_dir }}/{{ item.item.executable|default(item.item.name ~ ".exe") }}
      chdir={{ handy_app_dir }}
      7z.exe x "{{ lookup('pipe', 'wslpath -w "%s"' % item.dest) }}" -y
    vars:
      handy_app_dir: >-
        {{ lookup('pipe', 'wslpath "%s"' % win_handyapps_root) }}/{{ item.item.name }}
    loop: '{{ _get|json_query("results[?dest!=`null`]") }}'

  - name: shortcut added to start menu
    shell: >
      creates='{{ creates }}'
      {{ shortcut_ps % shortcut_args }}
    vars:
      creates: >-
        {{ lookup('pipe', 'wslpath "%s"' % win_handyapps_startmenu) }}/{{ item.name }}.lnk
      shortcut_args:
        sc_linkname: '{{ win_handyapps_startmenu }}\{{ item.name }}'
        sc_args: '{{ item.args|default("") }}'
        sc_target: '{{ win_handyapps_root }}\{{ item.name }}\{{ item.executable|default(item.name ~ ".exe") }}'
    loop: '{{ handy_apps|json_query("[?reg_startmenu!=`false`]") }}'

  - name: shortcut added to startup
    shell: >
      creates='{{ creates }}'
      {{ shortcut_ps % shortcut_args }}
    vars:
      creates: >-
        {{ lookup('pipe', 'wslpath "%s"' % win_startup) }}/{{ item.name }}.lnk
      shortcut_args:
        sc_linkname: '{{ win_startup }}\\{{ item.name }}'
        sc_args: '{{ item.args|default("") }}'
        sc_target: '{{ win_handyapps_root }}\\{{ item.name }}\\{{ item.executable|default(item.name ~ ".exe") }}'
    loop: '{{ handy_apps|json_query("[?startup]") }}'
      
  - name: Fonts dir created
    shell: >
      creates={{ papp_data_path }}/Fonts
      cmd.exe /c 'mkdir' '{{ winpath }}'
    register: _r
    vars:
      winpath: >-
        {{ lookup('pipe', 'wslpath -w "%s/Fonts"' % papp_data_path) }}
  - debug: var=_r verbosity=1

  - name: download fonts
    get_url: >
      dest={{ papp_data_path }}/Fonts/{{ item|urlsplit('path')|basename }}
      url={{ item|replace(" ", "%20") }}?raw=true
    loop: '{{ font_sources }}'
    register: _font
    environment: '{{ proxy_env }}'
    until: _font is succeeded
  - debug: var=_font verbosity=1

  - name: portableApps ini updated for taskbar icon hiding
    ini_file: >
      section=DisplayOptions
      path={{ papp_data_path }}/PortableAppsMenu.ini
      option=Windows7TaskbarIcon
      no_extra_spaces=yes
      value='false'

  - name: skk dict dir created
    shell: >
      creates={{ wsl_userprofile }}/SKKDICT
      cmd.exe /c 'mkdir {{ win_userprofile }}\SKKDICT'
    register: _r
  - debug: var=_r verbosity=1

  - name: download dicts
    get_url: >
      dest={{ wsl_userprofile }}/SKKDICT/{{ item|urlsplit('path')|basename }}
      url={{ item|replace(" ", "%20") }}
    loop: '{{ skkdict_sources }}'
    register: _skkdict
    environment: '{{ proxy_env }}'
    until: _skkdict is succeeded
  - debug: var=_skkdict verbosity=1

  - name: ruby script for hatena skk placed
    copy: >
      dest={{ wsl_userprofile }}/SKKDICT
      src=hatena_skk.rb
      force=no
      mode=0755
    register: _copy
  - debug: var=_copy verbosity=1

  - name: skk utf8 dict created
    shell: >
      zcat {{ item }} | nkf -w -Lu > {{ item|regex_replace("\.gz$", "") }}.utf8
    loop: '{{ _skkdict|json_query("results[?changed].dest") }}'
    when:
    - item is search("\.gz$")

  - name: skk utf8 hatena dict created
    shell: >
      chdir={{ wsl_userprofile }}/SKKDICT
      ruby.exe {{ _copy.src|basename }} {{ item|basename }} | nkf -w -Lu > SKK-JISYO.hatena.utf8
    loop: '{{ _skkdict|json_query("results[?changed].dest") }}'
    when:
    - item is search("\.csv$")

  - name: skk dicts merged and sorted
    shell: >
      chdir={{ wsl_userprofile }}/SKKDICT
      skkdic-expr2 -o SKK-JISYO.utf8.union {{ lookup('pipe', 'echo *.utf8').split()|join(" + ") }}
    when: _skkdict is changed

  - name: skk kana maps copied
    copy: >
      dest={{ wsl_userprofile }}/SKKDICT
      src={{ item }}
    loop: '{{ lookup("fileglob", "files/skk*.txt", wantlist=True) }}'
